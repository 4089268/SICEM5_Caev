@using ModsUbitoma.Mods
@inject IJSRuntime JSRuntime
@inject SicemService sicemService

<VentanaSecundaria Titulo="@Titulo" CerrarVentana="@CerrarModal" Filas="@(new double[]{.85,30})" Columnas="@(new double[]{.85})">
    <Content>
        <div class="container-fluid p-2" style="grid-row: 1/2; grid-column: 1/2; overflow-y:auto; overflow-x:hidden; margin-right:2rem;">
            <div class="row">
                @foreach (var item in Imagenes) {
                    <div class="col-2">
                        <div class="card shadow-sm sicem-card-image" @onclick="@(() => MostrarImagen(item))">
                            <img class="card-img-top" src="@string.Format("{2}/Documento/{0}/{1}?W=200&H=250", Enlace.Id, item.Id_Imagen, apiurl)" alt="@item.Archivo" style="height:250px;" loading="lazy" />
                            <div class="card-body">
                                <p class="card-text">@item.Descripcion</p>
                                <div class="d-flex justify-content-center">
                                    @if (item.FileExtension.ToLower().Contains("pdf")) {
                                        <span class="badge badge-success">PDF</span>
                                    }
                                    else {
                                        <span class="badge badge-info">IMAGEN</span>
                                    }
                                </div>
                            </div>
                            <div class="card-footer">
                                <small class="text-muted">Agregado el @item.FechaInsert.ToString()</small>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="container-fluid p-2 " style="grid-row: 2/3; grid-column: 1/2;">
            Total Imagenes @Imagenes.Count()
        </div>
        @if(imageneSeleccionada != null){
            <VisorImagen @ref="xvisorImagen" Show="@visorImagenVisible" Id_Imagen="@imageneSeleccionada.Id_Imagen.ToString()" Descripcion="@imageneSeleccionada.Descripcion" CerrarModal="@(e => visorImagenVisible  = false)" />
        }

    </Content>
</VentanaSecundaria>


@code {
    [Parameter] public IEnlace Enlace {get;set;}
    [Parameter] public IEnumerable<ImagenInfoResponse> Imagenes {get;set;}
    [Parameter] public EventCallback CerrarModal {get;set;}

    public string Titulo = "IMAGENS CAPTURADAS";
    private string apiurl = "http://nerus.sytes.net:8739/Api";
    private ImagenInfoResponse imageneSeleccionada {get; set;}
    private VisorImagen xvisorImagen {get;set;}
    private bool visorImagenVisible = false;



    /*********** FUNCIONES***********/
    protected override void OnInitialized(){
        this.apiurl = sicemService.ObtenerDireccionApi();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender){
            Titulo = $"{Enlace.Nombre} - IMAGENS CAPTURADAS";
        }
        
    }
    
    protected async Task Cerrar_Modal() {
        await CerrarModal.InvokeAsync("");
    }

    private async void MostrarImagen(ImagenInfoResponse data) {
        /*
        documentoSeleccionado = xi;
        if (documentoSeleccionado.Extencion != "pdf") {
            visorImagenVisible  = true;
            xvisorImagen.OficinaActual= this.OficinaActual;
            await xvisorImagen.Inicializar(xi);
        }else{
            var targetURl = string.Format("{2}/Api/Documento/{0}/{1}?W=200&H=250", OficinaActual, xi.Id_Imagen, apiurl);
            await JSRuntime.InvokeVoidAsync("OpenNewTabUrl",targetURl);
        }
        */
    }

}