@using Sicem_Blazor.Tarifas.Data
@inject ITarifasService tarifasService

@if(Visible){
    <VentanaSecundaria Titulo="Editando Tarifa" CerrarVentana="@(e => Cancelar())" Filas="@filas" Columnas="@columnas">
        <Content>
            <h3 class="text-center">@Tarifa.TipoUsuario </h3>
            <h4 class="text-center">@(Tarifa.Hasta >= 900000 ? $"> {Tarifa.Desde} m3": $"{Tarifa.Desde} - {Tarifa.Hasta} m3" )</h4>
            
            <div class="edit-item">
                <label>Rango</label>
                <div class="d-flex" style="width: calc(100% - 8rem);">
                    <input style="text-align:center;" type="numeric" min="0" max="10000" step="1" @bind-value="tmpDesde" />
                    <input style="text-align:center;" type="numeric" min="0" max="10000" step="1" @bind-value="tmpHasta" />
                </div>
            </div>

            <div class="edit-item">
                <label>Cuota Base</label>
                <input type="numeric" min="0.00" max="10000.00" step="any" @bind-value="tmpCostoBase" />
            </div>

            <div class="edit-item">
                <label>Costo Adicional</label>
                <input type="numeric" min="0.00" max="10000.00" step="any" @bind-value="tmpCosto" />
            </div>

            <div class="d-fle d-flex align-items-end justify-content-center">

                <button class="button mx-3 px-3 py-2" @onclick="@(e => Guardar())">
                    <i class="fa fa-save mr-2"></i>
                    <div> Guardar</div>
                </button>

                <button class="button mx-3 px-3 py-2" @onclick="@(e => Cancelar())">
                    <i class="fa fa-ban mr-2"></i>
                    <div> Cancelar</div>
                </button>

            </div>

        </Content>
    </VentanaSecundaria>

    <style>
        .edit-item{
            display: flex;
            align-items:center;
        }

        .edit-item label{
            font-size: 1.1rem;
            font-weight: 600;
            width: 7rem;
        }

        .edit-item input{
            padding: .5rem 1rem;
            width: calc(100% - 9rem);
            margin-left: 1rem;
            text-align: right;
        }


    </style>

}

@code {
    [Parameter] public bool Visible  {get;set;}
    [Parameter] public ITarifa Tarifa  {get;set;}
    [Parameter] public EventCallback<bool> CerrarModal {get;set;}

    [Parameter] public bool ModificarBaseDatos {get;set;} = true;

    
    private int tmpDesde = 0;
    private int tmpHasta = 0;
    private decimal tmpCosto = 0m;
    private decimal tmpCostoBase = 0m;
    private decimal tmpCuotaBase = 0m;
    private decimal tmpAdicional = 0m;

    protected override void OnParametersSet() {
        base.OnParametersSet();
        if(Tarifa != null){
            this.tmpDesde = Tarifa.Desde;
            this.tmpHasta = Tarifa.Hasta;
            this.tmpCosto = Tarifa.Costo;
            this.tmpCostoBase = Tarifa.CostoBase;
            this.tmpCuotaBase = Tarifa.CuotaBase;
            this.tmpAdicional = Tarifa.AdicionalM3;
        }
    }
    
    private double[] filas = new double[]{32, 45, 35, 35, 65};
    private double[] columnas = new double[]{300};

    private async Task Cancelar(){
        await CerrarModal.InvokeAsync(false);
    }
    private async Task Guardar(){
        Tarifa.Desde = tmpDesde;
        Tarifa.Hasta = tmpHasta;
        
        Tarifa.Costo = tmpCosto;
        Tarifa.CostoBase = tmpCostoBase;
        Tarifa.CuotaBase = tmpCuotaBase;
        Tarifa.AdicionalM3 = tmpAdicional;
        if(ModificarBaseDatos){
            tarifasService.ModificarTarifaSicem(Tarifa);
        }
        await CerrarModal.InvokeAsync(true);
    }

}   