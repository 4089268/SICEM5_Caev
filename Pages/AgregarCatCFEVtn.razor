@inject ITarifasService tarifasService

<VentanaSecundaria Titulo="@Titulo" Filas="@GridFilas" Columnas="@GridColumnas" CerrarVentana="@CerrarModal">
    <Content>
        <div class="item-cat">
            <label class="my-auto h5">AÃ±o:</label>
            <input type="number" @bind="@CatalogoCFE.Af" disabled="@Editar" />
        </div>

        <div class="item-cat">
            <label class="my-auto h5">Mes:</label>
            <input type="number" @bind="@CatalogoCFE.Mf" disabled="@Editar" />
        </div>

        <div class="item-cat">
            <label class="my-auto h5">Costo Kw:</label>
            <input type="number" @bind="@CatalogoCFE.CostoKw" />
        </div>

        <div class="d-flex align-items-center justify-content-center mt-5">
            <button class="button py-2 w-100 mx-2" @onclick="AgergerCatalogo">
                <span>@(Editar?"Editar":"Agregar")</span>
            </button>
        </div>

    </Content>
</VentanaSecundaria>
<style>
    .item-cat{
        display: grid;
        grid-template-rows: 1fr;
        grid-template-columns: 7rem 1fr;
    }
    .item-cat input{
        padding-left: 1rem;
    }


</style>

@code{
    [Parameter] public EventCallback OnClosed {get; set;}
    [Parameter] public CatCfe UltimoCatalogoCFE {get; set;}
    [Parameter] public bool Editar {get;set;}
    private double[] GridFilas = new double[]{30, 30, 30,  70};
    private double[] GridColumnas = new double[]{ 220 };
    private CatCfe CatalogoCFE ;
    private string Titulo = "Agregar Catalogo CFE";
    
    protected override void OnParametersSet()
    {
        Titulo = Editar?"Editar Catalogo CFE": "Agregar Catalogo CFE";

        if(Editar){
            CatalogoCFE = UltimoCatalogoCFE;
        }else{
            var _now = (new DateTime( (int) UltimoCatalogoCFE.Af, (int) UltimoCatalogoCFE.Mf, 1)).AddMonths(1);
            CatalogoCFE = new CatCfe(){
                Af = _now.Year,
                Mf = _now.Month,
                CostoKw = UltimoCatalogoCFE.CostoKw
            };
        }
    }

    private async Task CerrarModal(){
        await OnClosed.InvokeAsync(null);
    }

    private async Task AgergerCatalogo(){
        if(!Editar){
            decimal _ultimoCosto = UltimoCatalogoCFE.CostoKw??1m;
            decimal _fikw = Math.Round( (CatalogoCFE.CostoKw??0m - _ultimoCosto) / _ultimoCosto , 4);
            decimal _porInc  = _fikw * 100;
            decimal _porApli = Math.Round(_porInc * .30m, 2);

            CatalogoCFE.FiKw = _fikw;
            CatalogoCFE.PorcInc = _porInc;
            CatalogoCFE.PorcApli = _porApli;

            tarifasService.AgregarCatalogoCFE(CatalogoCFE);

        }else{
            tarifasService.ActualizarCatalogoCFE(CatalogoCFE);
        }

        await CerrarModal();
    }

}